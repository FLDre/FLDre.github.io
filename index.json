[{"categories":null,"content":"字节序 ","date":"2024-07-01","objectID":"/network/:0:0","tags":null,"title":"Unix 网络编程","uri":"/network/"},{"categories":null,"content":"主机字节序 主机字节序是指特定计算机系统或架构使用的字节序。主机字节序有两种主要类型： 小端序(Little-endian) 低位字节存入低地址，高位字节存入高地址 常见的小端序系统包括大多数的x86架构(如Intel和AMD处理器) 大端序(Big-endian) 低位字节存入高地址，高位字节存入低地址 常见的大端序系统包括一些RISC处理器(如SPARC、PowerPC) 例如，将0x12345678写入0x1000开始的内存中，以小端序和大端序模式存放结果如下: 内存地址 0x1000 0x10001 0x10002 0x10003 小端序 0x78 0x56 0x34 0x12 大端序 0x12 0x34 0x56 0x78 ","date":"2024-07-01","objectID":"/network/:1:0","tags":null,"title":"Unix 网络编程","uri":"/network/"},{"categories":null,"content":"网络字节序 网络字节序是一种标准化的字节序，用于确保在不同系统之间正确传输数据 网络字节序采用大端序(Big-endian) struct sockaddr_in* saddr; if (saddr-\u003esin_addr.s_addr != htonl(INADDR_LOOPBACK)) { // 如果条件为真，表示IP地址不是回环地址，执行此块代码 } s_addr是sin_addr中的一个字段，表示实际的IP地址，以网络字节序(大端序)存储 INADDR_LOOPBACK是一个常量值0x7F000001(即127.0.0.1的二进制表示)，要使用htonl将其转换为网络字节序 htonl(Host TO Network Long) 将32位整数从主机字节序转换为网络字节序 uint32_t htonl(uint32_t hostlong); ","date":"2024-07-01","objectID":"/network/:2:0","tags":null,"title":"Unix 网络编程","uri":"/network/"}]